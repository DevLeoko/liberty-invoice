// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  isEmailVerified Boolean
  passwordHash    String?
  refreshSession  String?
  createdAt       DateTime @default(now())

  userSettings UserSettings?

  clients       Client[]
  taxRates      TaxRate[]
  invoices      Invoice[]
  invoiceItems  InvoiceItem[]
  textFragments TextFragment[]
  Product       Product[]
}

model UserSettings {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique

  // Account details (same a client)
  name           String
  shorthand      String
  additionalLine String
  firstName      String
  lastName       String
  contactPhone   String
  contactEmail   String
  vatNumber      String

  street       String
  streetNumber String
  city         String
  zip          String
  countryCode  String

  defaultLanguage  String
  defaultCurrency  String
  defaultTaxRate   TaxRate? @relation(fields: [defaultTaxRateId], references: [id], onDelete: SetNull)
  defaultTaxRateId Int?
  defaultDueDays   Int
  // End account details

  logoUrl  String
  bankName String
  iban     String
  bic      String

  idFormat      String
  nextPartialId Int
  partialIdDate DateTime

  enableTaxPerItem   Boolean
  enableMultilingual Boolean

  marketingEmails Boolean @default(false)
}

model TaxRate {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  name        String
  displayText String
  rate        Float

  clients      Client[]
  userSettings UserSettings[]
  invoices     Invoice[]
}

model Client {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  name           String
  shorthand      String
  additionalLine String
  firstName      String
  lastName       String
  contactPhone   String
  contactEmail   String
  vatNumber      String
  // Address:
  street         String
  streetNumber   String
  city           String
  zip            String
  countryCode    String

  defaultLanguage  String
  defaultCurrency  String
  defaultTaxRate   TaxRate? @relation(fields: [defaultTaxRateId], references: [id], onDelete: SetNull)
  defaultTaxRateId Int?
  defaultDueDays   Int

  invoices      Invoice[]
  textFragments TextFragment[]
}

model Invoice {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  client   Client @relation(fields: [clientId], references: [id], onDelete: Restrict)
  clientId Int

  draft         Boolean   @default(true)
  invoiceNumber String
  date          DateTime  @db.Date()
  dueDate       DateTime  @db.Date()
  currency      String
  language      String
  taxRates      TaxRate[]
  note          String    @db.Text

  amountWithoutTax Float
  amountWithTax    Float
  amountPaid       Float

  items InvoiceItem[]

  @@unique([userId, invoiceNumber])
}

model InvoiceItem {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?

  name        String
  description String
  quantity    Float
  unit        String
  unitPrice   Float
}

model Product {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  name        String
  description String
  unit        String
  unitPrice   Float
  currency    String

  stockedUnits Float?

  invoiceItems InvoiceItem[]
}

model TextFragment {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  language String?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int?
  key      String
  value    String  @db.Text
}

model CurrencyExchangeRates {
  toCurrency   String
  fromCurrency String
  rate         Float

  @@id([toCurrency, fromCurrency])
}
